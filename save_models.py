import os
import torch
from micro_diffusion.micro_diffusion.models.model import create_latent_diffusion

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è CPU
os.environ['PYTORCH_CUDA_ALLOC_CONF'] = 'expandable_segments:True'

def save_models():
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ç–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏"""
    print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π...")
    
    # =======================
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —É—á–∏—Ç–µ–ª—è
    # =======================
    print("–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —É—á–∏—Ç–µ–ª—è...")
    try:
        teacher_model = create_latent_diffusion(
            latent_res=64,
            in_channels=4,
            pos_interp_scale=2.0,
            precomputed_latents=False,
            dtype="float32"
        )
        print("‚úÖ –ú–æ–¥–µ–ª—å —É—á–∏—Ç–µ–ª—è —Å–æ–∑–¥–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏ —É—á–∏—Ç–µ–ª—è: {e}")
        return False

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å–∞ —É—á–∏—Ç–µ–ª—è
    print("–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å–∞ —É—á–∏—Ç–µ–ª—è...")
    try:
        teacher_weights = torch.load("./micro_diffusion/trained_models/teacher.pt", map_location="cpu")
        teacher_model.dit.load_state_dict(teacher_weights, strict=False)
        teacher_model.eval()
        teacher_model = teacher_model.to("cpu")
        print("‚úÖ –í–µ—Å–∞ —É—á–∏—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–µ—Å–æ–≤ —É—á–∏—Ç–µ–ª—è: {e}")
        return False

    # =======================
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
    # =======================
    print("–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞...")
    try:
        student_model = create_latent_diffusion(
            latent_res=64,
            in_channels=4,
            pos_interp_scale=2.0,
            precomputed_latents=False,
            dtype="float32"
        )
        print("‚úÖ –ú–æ–¥–µ–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")
        return False

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤–µ—Å–∞–º–∏ —É—á–∏—Ç–µ–ª—è
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤–µ—Å–∞–º–∏ —É—á–∏—Ç–µ–ª—è...")
    try:
        student_model.dit.load_state_dict(teacher_weights, strict=False)
        student_model.train()
        student_model = student_model.to("cpu")
        print("‚úÖ –°—Ç—É–¥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤–µ—Å–∞–º–∏ —É—á–∏—Ç–µ–ª—è")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")
        return False

    # =======================
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
    # =======================
    print("–°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª–∏...")
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –º–æ–¥–µ–ª–∏
        torch.save(teacher_model, "teacher_model_ready.pt")
        print("‚úÖ –£—á–∏—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: teacher_model_ready.pt")
        
        torch.save(student_model, "student_model_ready.pt")
        print("‚úÖ –°—Ç—É–¥–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: student_model_ready.pt")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å–∞ –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        torch.save(teacher_weights, "teacher_weights.pt")
        print("‚úÖ –í–µ—Å–∞ —É—á–∏—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: teacher_weights.pt")
        
        print("\nüéâ –í—Å–µ –º–æ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å train_fast_load.py –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π: {e}")
        return False

if __name__ == "__main__":
    print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏")
    print("‚è±Ô∏è  –≠—Ç–æ –∑–∞–π–º–µ—Ç 5-10 –º–∏–Ω—É—Ç, –Ω–æ –ø–æ—Ç–æ–º –±—É–¥–µ—Ç –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ!")
    
    success = save_models()
    
    if success:
        print("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å:")
        print("   python train_fast_load.py")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π")

